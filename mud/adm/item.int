classe adm_item
herda comando_adm_ajuda
const m_ajuda = "-t Comandos de itens\n\
-m LITEM Lista itens existentes\n\
-m PITEM Pesquisa itens com um determinado nome\n\
-m NITEM Pesquisa itens por nível e/ou renascer\n\
-m IITEM Mostra aonde está um item\n\
-m CITEM Cria um item\n\
-m EITEM Edita um item\n\
-m AITEM Apaga um ou mais itens"


classe adm_litem
herda comando_adm
const objcmd = arg1.c_litem ? este
const m_ajuda = "-t\n\
-s [nome]\n\
Lista os itens que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os itens."

func escr
  listar(arg0, arg1, arg2, "")

func listar # Listar itens
# arg0 = para que jogador listar
# arg1 = nome da classe (para comando litem) ou "" se todas
# arg2 = permissões do jogador
# arg3 = nome do item (para comando pitem), ou "" se todos
  refvar t = arg0.sock.txtmais
  debug d
  prog p
  int32 total
  txt100 lin
  t.limpar
  d.exec = 100000
  p.iniclasse("i_" + txtremove(arg1, "EMDCT7"))
  se int(arg2.c_litem) >= 2
    epara nulo, p.lin, p.depois
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SGC", [p.texto]:item, 1)
      t.addfim(lin + " " + inttotal($[p.texto]) + "  " + [p.texto]:nome)
      total += inttotal($[p.texto])
    efim
  senao
    refvar prefixo = "i_" + arg0.jogarea
    arg1 == txt(arg0.jogarea, 0, inttotal(arg1)) && p.iniclasse(prefixo)
    epara nulo, p.lin, p.depois
      sair prefixo + txtfim(p.texto, 3) != p.texto
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SGC", [p.texto]:item, 1)
      t.addfim(lin + " " + inttotal($[p.texto]) + "  " + [p.texto]:nome)
      total += inttotal($[p.texto])
    efim
  fimse
  se t.linhas
    t.addini("\b\c6Item(" + t.linhas + ") Tipo Quantidade(" + total + ") Nome\b")
  senao
    t.addini("\bNenhum item encontrado.")
  fimse
  arg0.sock.txtmostra


classe adm_pitem
herda adm_litem
const objcmd = arg1.c_litem ? este
const m_ajuda = "-t\n\
-s [nome]\n\
Pesquisa os itens com o nome especificado ou parte dele.\n\
Se o nome for omitido, lista todos os itens."

func escr
  listar(arg0, "", arg2, arg1)


classe adm_nitem
herda comando_adm
const objcmd = arg1.c_litem ? este
const m_ajuda = "-t\n\
-s N<nível>\n\
-s N<nível>\n\
-s R<renascer>\n\
-s N<nível nínimo>-<nível máximo>\n\
-s R<renascer mínimo>-<renascer máximo>\n\
Pesquisa os itens conforme o nível e o a quantidade de renascer.\n\
É possível combinar as opções N e R no mesmo comando. Se o valor mínimo\n\
for omitodo será 0, e se o máximo for omitido, será 65535.\n\
Exemplos:\n\
-s N10\n\
-s N15-20\n\
-s N-20\n\
-s R1-5\n\
-s N20-50 R3\n\
O primeiro pesquisa itens do nível 10, o segundo itens do nível 15 ao 20,\n\
O terceiro itens do nível 0 ao 20, o quarto itens que precisa renascer de\n\
1 a 5 vezes e o quarto itens do nível 20 ao 50 que precisa renascer 3 vezes."

func escr # Editar item
  txt512 lin
  int32 nmin = 0
  int32 nmax = 65535
  int32 rmin = 0
  int32 rmax = 65535
  int8 achou
# Obtém nível e quantidade de renascer
  epara lin = arg1, lin, lin = txt2(lin)
    refvar opc = txt1(lin)
    refvar opc2 = txttroca(opc, "-", " ")
    continuar intsub(opc2) > 2
    se txt(opc, 0, 1) == "N"
      nmin = txt(opc2, 1)
      nmax = txtfim(opc, 1) == "-" ? 65536 : (txt2(opc2) ?? nmin)
      achou = 1
    senao txt(opc, 0, 1) == "R"
      rmin = txt(opc2, 1)
      rmax = txtfim(opc, 1) == "-" ? 65536 : (txt2(opc2) ?? rmin)
      achou = 1
    fimse
  efim
  ret !achou, arg0.msg("\bEspecificar o nível e/ou renascer após NITEM")
# Procura os itens
  debug d
  prog p
  int32 total
  refvar t = arg0.sock.txtmais
  t.limpar
  d.exec = 100000
  refvar prefixo = int(arg2.c_litem) < 2 ? "i_" + arg0.jogarea
  epara p.iniclasse(prefixo ?? "i_"), p.lin, p.depois
    sair prefixo && prefixo + txtfim(p.texto, 3) != p.texto
    continuar nmin > [p.texto]:nivel || nmax < [p.texto]:nivel
    continuar rmin > [p.texto]:renascer || rmax < [p.texto]:renascer
    lin = txt(p.texto, 2) + " " + txt(" SGC", [p.texto]:item, 1)
    lin += " " + inttotal($[p.texto]) + " N" + int([p.texto]:nivel)
    t.addfim(lin + " R" + int([p.texto]:renascer) + " " + [p.texto]:nome)
    total += inttotal($[p.texto])
  efim
# Mostra o resultado
  se t.linhas
    t.addini("\b\c6Item(" + t.linhas + ") Tipo Quantidade(" + total + ") Nível Renascer Nome\b")
  senao
    t.addini("\bNenhum item encontrado.")
  fimse
  lin = "\b\c6Procurando nível " + nmin + (nmin != nmax ? "-" + nmax)
  t.addini(lin + " renascer " + rmin + (rmin != rmax ? "-" + rmax))
  arg0.sock.txtmostra


classe adm_iitem
herda comando_adm
const objcmd = arg1.c_iitem ? este
const m_ajuda = "-t\n-s <nome>\nMostra aonde está cada item do tipo especificado."

func escr # Listar personagens
  prog p
  se arg1 == ""
    arg0.msg("\bTecle o nome do item após IITEM")
  senao !existe_i(arg0, arg1)
    arg0.msg("\bItem não existe: " + arg1)
  senao arg2.c_iperso <= 1 && arg0.jogarea + txtfim(arg1, 3) != arg1
    arg0.msg("\bItem não existe: " + arg1)
  senao !$i_[arg1]
    arg0.msg("\bItem não está no jogo: " + arg1)
  senao
    textotxt t
    t.addfim("\b\c6Itens " + arg1 + " em:\b")
    ref r
    ref s
    txt100 lin
    epara r = $i_[arg1], r && t.linhas < 500, r = objdepois(r)
      epara s = r.dono, s, s = s.dono
        se s.perso
          lin = (s.jog ? ", jogador" : ", " + txt(s, 2)) + " (" + s.nome + ")" + lin
        senao s.item
          lin = ", " + txt(s, 2) + " (" + s.nome + ")" + lin
        senao
          lin = ", " + txt(s, 2) + " (" + s.s_titulo + ")" + lin
        fimse
      efim
      t.addfim(txt(lin, 2)), lin = ""
    efim
    arg0.msg2(t.remove(500))
  fimse


classe adm_citem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const m_ajuda = "-t\n\
-s <nome>\n\
Cria um item. Nome deve ser o nome de uma área ou do item.\n\
Nomes de itens são sempre nomes de área seguido de um número de 001 a 999."

func escr # Criar item
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg1 == ""
    ret arg0.msg("Tecle o nome do item ou da área após CITEM")
  fimse
# Checa nome completo
  nome = txtmin(txtremove(arg1, "EMDCT7"))
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg1, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
    senao p.existe("i_" + nome)
      ret arg0.msg("Item já existe: " + nome)
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    ret arg0.msg("Área não existe: " + nome)
  senao
    epara num = 1001, p.existe("i_" + nome + txtfim(num, 3)), num++
      continuar num < 2000
      ret arg0.msg("Atingido limite de itens na área " + nome)
    efim
    nome += txtfim(num, 3)
  fimse
# Checa se pode criar sala
  se arg2.c_eitem >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
  fimse
# Pergunta que tipo de item criar
  arg0.sock.var.opcclasse = nome
  passo(arg0.sock, "")

func passo # Escolher o tipo de item ao criar
  txt40 deriv
  casovar txtmin(arg1)
  casose
    arg0.msg("Opção inválida")
  casose "\b"
  casose ""
    arg0.passo = este
    arg0.msg("Entre com o tipo de item, O mostra as opções, Z cancela")
    ret 1
  casose "z"
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    arg0.var.opcclasse = ""
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("S Simples")
    arg0.txtmais.addfim("G Agrupa vários em um objeto para economizar memória")
    arg0.txtmais.addfim("C Completo (luz, mobília, container que pode ser fechado)")
    arg0.txtmostra
    ret 1
  casose "s"
    deriv = "comum_item"
    sair
  casose "g"
    deriv = "comum_itemgrupo"
    sair
  casose "c"
    deriv = "comum_itemperso"
    sair
  casofim
# Cria item
  prog p
  txt100 area
  area = txt(arg0.var.opcclasse, 0, inttotal(arg0.var.opcclasse) - 3)
  p.criar("i_" + arg0.var.opcclasse + "\nareas/" + area + "\nherda " + deriv)
  criar("admordena", "areas/" + area)
# config:salvar
  arg0.msg("\bItem criado: " + arg0.var.opcclasse)
  admlog(arg0, "criou item " + arg0.var.opcclasse)
  arg0.passo = ""
  arg0.var.opcclasse = ""
  ret 1


classe adm_aitem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const m_ajuda = "-t\n\
-s <nomes dos itens>\n\
Apaga uma ou mais itens, com os nomes especificados."

func escr # Apagar item
  prog p
  refvar nome1 = txtmin(txtremove(arg1, "EMDCT7"))
  se nome1 == ""
    ret arg0.msg("Tecle um ou mais nomes de itens após AITEM")
  fimse
  uint16 x
  enquanto txtsub(nome1, x, 1)
    refvar nome2 = txtsub(nome1, x, 1)
    se !p.existe("i_" + nome2)
      ret arg0.msg("Item não existe: " + nome2)
    senao arg2.c_eitem >= 2
    senao nome2 != arg0.jogarea + txtfim(nome2, 3)
      ret arg0.msg("Item não existe: " + nome2)
    fimse
    x++
  efim
  arg0.sock.tpasso = nome1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar item
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("i_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Item apagado: " + arg0.tpasso)
      admlog(arg0, "apagou item " + arg0.tpasso)
    senao
      arg0.msg("Itens apagados: " + arg0.tpasso)
      admlog(arg0, "apagou itens " + arg0.tpasso)
    fimse
  senao
    txt20 m1
    arg0.passo = este
    m1 = txt2(arg0.tpasso) ? "itens" : "item"
    arg0.msg("Apagar " + m1 + infonome(arg0.tpasso) + "? Tecle S ou N")
  fimse
  ret 1

func infonome
  txt200 n1 = arg0
  txt300 n2
  enquanto n1
    refvar agora = txt1(n1)
    n1 = txt2(n1)
    n2 += " " + agora + "(" + i_[agora]:nome + ")"
  efim
  ret n2


classe adm_eitem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const m_ajuda = "-t\n-s <nome>\nEdita o item com o nome especificado."

func escr # Editar item
  prog p
  uint8 num
  refvar nome = txtmin(txtremove(arg1, "EMDCT7"))
  se nome == ""
    ret arg0.msg("Tecle o nome do item após EITEM")
  senao !p.existe("i_" + nome)
    ret arg0.msg("\bItem não existe: " + nome)
  senao !p.existe("menu_item" + (num = i_[nome]:item))
    ret arg0.msg("\bItem não pode ser editado: " + nome)
  senao arg2.c_eitem >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("\bItem não existe: " + nome)
  fimse
  arg0.sock.var.classe1 = "i_" + txtmin(nome)
  arg0.sock.var.menufim = "menu_item" + num
  arg0.sock.m_menu("menu_item" + num)


classe menu_idescoutros
herda comando_menu_adm
const titulo = "Outras descrições"
const menufim = var.menufim
#
const nome1 = "Ao olhar"
const tipo1 = "opc_texto"
const vari1 = "descver"
#
const nome2 = "Ao olhar aberto"
const info2 = "Quando o item está aberto; se ausente pega de Ao olhar"
const tipo2 = "opc_texto"
const vari2 = "descaberto"
#
const nome3 = "Identificar"
const info3 = "Texto adicionado após identificar (com magia de identificação)"
const tipo3 = "opc_texto"
const vari3 = "descident"
#
const nome4 = "Esconde peso"
const info4 = "Se não deve mostrar o peso ao ver/olhar/identificar"
const tipo4 = "opc_simnao"
const vari4 = "i_escondepeso"
#
const nome5 = "Esconde volume"
const info5 = "Se não deve mostrar o volume ao ver/olhar/identificar"
const tipo5 = "opc_simnao"
const vari5 = "i_escondevolume"


classe menu_identro2
herda comando_menu_adm
const titulo = "Dentro grupo"
const menufim = var.menufim
#
const nome1 = "Sala pegar,soltar"
const info1 = "Se definido, os comandos pegar e soltar pegam e soltam itens dessa sala"
const tipo1 = "opc_sala"
const vari1 = "i_salapegar"
#
const nome2 = "Sala ver"
const info2 = "Se definido, os comandos ver e olhar mostram a descrição dessa sala"
const tipo2 = "opc_sala"
const vari2 = "i_salaver"
#
const nome3 = "Sala/item entrar"
const info3 = "Para qual sala do MUD vai ao entrar no item\n\
Para ir para a sala aonde um item está, escreva item e o nome do item"
const tipo3 = "opc_salaitem"
const vari3 = "i_salaentrar"


classe menu_identro1
herda menu_identro2
const titulo = "Dentro simples"
#
const nome4 = "Salas"
const info4 = "Itens com salas não podem ser pegos\n\
Mudar essa opção não cria ou remove salas nos itens que já existem"
const tipo4 = "opc_listasala"
const vari4 = "i_salas"
const extr4 = "20"
#
const nome5 = "Volume"
const tipo5 = "opc_numero"
const vari5 = "volmax"
#
const nome6 = "Expande"
const info6 = "Volume aumenta se tiver itens dentro"
const tipo6 = "opc_simnao"
const vari6 = "volexp"
const exec6 = "ajustapeso"
#
const nome7 = "Objetos máximo"
const tipo7 = "opc_numero"
const vari7 = "objmax"
#
const nome8 = "Itens dentro"
const info8 = "Somente esses itens podem ser colocados dentro\n\
Se vazio, pode-se colocar moedas e qualquer item dentro"
const tipo8 = "opc_listaitem"
const vari8 = "i_itens"
#
const nome9 = "Container"
const tipo9 = "opc_opcao"
const vari9 = "i_aberto"
const exec9 = "recalc_exec"
const extr9 = "Não\nSempre aberto"


classe menu_identro3
herda menu_identro1
const titulo = "Dentro completo"
#
const nome9 = "Container"
const tipo9 = "opc_opcao"
const vari9 = "i_abertoini"
const exec9 = "recalc_exec"
const extr9 = "Não\n\
Sempre aberto\n\
Inicialmente aberto\n\
Inicialmente fechado\n\
Inicialmente trancado\n\
Indefinido; não checa se está aberto, fechado ou trancado"
#
const nome10 = "Trancar"
const tipo10 = "opc_opcao"
const vari10 = "i_tranc"
const extr10 = "Não pode ser trancado\nPode ser trancado\nTranca ao fechar"
#
const nome11 = "Fechadura"
const info11 = "Código da chave que tranca e destranca o container\n\
Se for o nome de uma casa (vide comando lcasa), é necessário a chave da casa"
const tipo11 = "opc_linha"
const vari11 = "i_fechadura"
#
const nome12 = "Come chave"
const info12 = "Se o personagem perde a chave ao abrir o item"
const tipo12 = "opc_simnao"
const vari12 = "i_comechave"


classe menu_iarma1
herda comando_menu_adm
const titulo = "Arma"
const menufim = var.menufim
#
const nome1 = "Tipo de arma"
const tipo1 = "opc_opcao"
const vari1 = "armatipo"
const extr1 = "Não é arma\n" + txtsublin(config:arma_txt, 1)
#
const nome2 = "Ataque automático"
const info2 = "Habilidade usada como ataque automático dessa arma\n\
Se estiver vazio, o nome da habilidade é o tipo de arma"
const tipo2 = "opc_linha"
const vari2 = "armaatk"
#
const nome3 = "Só ataca manual"
const info3 = "Se o personagem não usa essa arma em ataques automáticos"
const tipo3 = "opc_simnao"
const vari3 = "armamanual"
#
const nome4 = "Taxa de falha"
const info4 = "Porcentagem de falha para itens (arma ou munição) que por natureza\n\
podem falhar. De 0 a 100."
const tipo4 = "opc_numero"
const vari4 = "armafalha"
const extr4 = "0 100"
const exec4 = "recalc_exec"
#
const nome5 = "Precisão perso"
const info5 = "Quanta precisão o personagem ganha durante um ataque com essa arma"
const tipo5 = "opc_numero"
const vari5 = "armaaddprecisao"
const exec5 = "recalc_exec"
#
const nome6 = "Alcance da arma"
const info6 = "Alcance em pontos de movimento, para percorrer salas em uma direção"
const tipo6 = "opc_numero"
const vari6 = "armamove"
#
const nome7 = "Ataque mín"
const info7 = "Quando empunhado, usado como munição, pergaminho, comando Item, etc."
const tipo7 = "opc_numero"
const vari7 = "armamin"
const exec7 = "recalc_exec"
#
const nome8 = "Ataque máx"
const info8 = "Quando empunhado, usado como munição, pergaminho, comando Item, etc."
const tipo8 = "opc_numero"
const vari8 = "armamax"
const exec8 = "recalc_exec"
#
const nome10 = "Itens munição"
const info10 = "Que itens podem ser usados como munição"
const tipo10 = "opc_listaitem"
const vari10 = "i_municao"


classe menu_iarma2
herda menu_iarma1
#
const nome9 = "Origem da munição"
const info9 = "Nota: A opção \"2 Itens na arma\" não existe em itens que agrupam"
const tipo9 = "opc_simnao"
const vari9 = "armamunicao"
const extr9 = "Nenhuma\nItens no inventário"


classe menu_iarma3
herda menu_iarma1
#
const nome9 = "Origem da munição"
const tipo9 = "opc_opcao"
const vari9 = "armamunicao"
const extr9 = "Nenhuma\nItens no inventário\nItens na arma"
#
const nome11 = "Carregar"
const info11 = "Conhecimento para carregar e descarregar a arma que está empunhando"
const tipo11 = "opc_opcao"
const vari11 = "armacarregar"
const extr11 = "Não permite\n" + txtsublin(misc:aulas, 1)


classe menu_ifome1
herda menu_ifome2
#
const extr1 = "Nenhum\n\
Fonte, não some após beber\n\
Poção, beber\n\
Comida, comer\n\
Pergaminho, recitar\n\
Container, beber"
#
const nome3 = "Capacidade"
const info3 = "Somente container, em ml (1000 ml = 1 litro)"
const tipo3 = "opc_numero"
const vari3 = "f_totalml"


classe menu_ifome2
herda comando_menu_adm
const titulo = "Fome e sede"
const menufim = var.menufim
#
const nome1 = "Tipo"
const tipo1 = "opc_opcao"
const vari1 = "f_tipo"
const extr1 = "Nenhum\n\
Fonte, não some após beber\n\
Poção, beber\n\
Comida, comer\n\
Pergaminho, recitar"
#
const nome2 = "Nome do líquido"
const info2 = "Somente fontes e container de líquido"
const tipo2 = "opc_linha"
const vari2 = "f_liquido"
#
const nome4 = "Msg perso"
const info4 = "Quando alguém come/bebe/recita o item; se vazio usa mensagem padrão"
const tipo4 = "opc_linha"
const vari4 = "f_msgperso"
#
const nome5 = "Msg outros"
const info5 = "Quando alguém come/bebe/recita o item; se vazio usa Msg perso"
const tipo5 = "opc_linha"
const vari5 = "f_msgoutros"
#
const nome6 = "Sacia a sede"
const info6 = "Um minuto são de 3 a 4 unidades, exceto no deserto"
const tipo6 = "opc_numero"
const vari6 = "f_sede"
const extr6 = "-250 250"
#
const nome7 = "Sustenta"
const info7 = "Um minuto são de 3 a 4 unidades"
const tipo7 = "opc_numero"
const vari7 = "f_fome"
const extr7 = "-250 250"
#
const nome8 = "Embriaguez"
const info8 = "Um minuto são de 6 a 8 unidades"
const tipo8 = "opc_numero"
const vari8 = "f_bebida"
const extr8 = "-250 250"
#
const nome9 = "Digestão"
const info9 = "Quanto tempo leva para digerir o alimento\n\
Um minuto são de 3 a 12 unidades, dependendo da posição do personagem"
const tipo9 = "opc_numero"
const vari9 = "f_diges"
const extr9 = "-250 250"
#
const nome10 = "Magia 1"
const info10 = "Nome da magia"
const tipo10 = "opc_linha"
const vari10 = "f_magia1"
#
const nome11 = "Nível 1"
const tipo11 = "opc_numero"
const vari11 = "f_nivel1"
const extr11 = "0 65535"
#
const nome12 = "Magia 2"
const info12 = "Nome da magia"
const tipo12 = "opc_linha"
const vari12 = "f_magia2"
#
const nome13 = "Nível 2"
const tipo13 = "opc_numero"
const vari13 = "f_nivel2"
const extr13 = "0 65535"
#
const nome14 = "Magia 3"
const info14 = "Nome da magia"
const tipo14 = "opc_linha"
const vari14 = "f_magia3"
#
const nome15 = "Nível 3"
const tipo15 = "opc_numero"
const vari15 = "f_nivel3"
const extr15 = "0 65535"


classe menu_isom
herda comando_menu_adm
const titulo = "Sons e mensagens"
const menufim = var.menufim
#
const nome1 = "Som empunhou"
const info1 = "Ao empunhar esse item"
const tipo1 = "opc_linha"
const vari1 = "i_som_emp1"
#
const nome2 = "Som removeu"
const info2 = "Ao deixar de empunhar esse item"
const tipo2 = "opc_linha"
const vari2 = "i_som_emp0"
#
const nome3 = "Som vestiu"
const info3 = "Ao vestir esse item"
const tipo3 = "opc_linha"
const vari3 = "i_som_vest1"
#
const nome4 = "Som removeu vestir"
const info4 = "Ao deixar de vestir esse item"
const tipo4 = "opc_linha"
const vari4 = "i_som_vest0"
#
const nome5 = "Entrou perso"
const info5 = "Mensagem para o personagem que entrou"
const tipo5 = "opc_linha"
const vari5 = "i_entraitem0"
#
const nome6 = "Entrou andando"
const tipo6 = "opc_linha"
const vari6 = "i_entraitem1"
#
const nome7 = "Entrou flutuando"
const tipo7 = "opc_linha"
const vari7 = "i_entraitem2"
#
const nome8 = "Entrou voando"
const tipo8 = "opc_linha"
const vari8 = "i_entraitem3"
#
const nome9 = "Entrou cambaleando"
const tipo9 = "opc_linha"
const vari9 = "i_entraitem4"
#
const nome10 = "Saiu andando"
const tipo10 = "opc_linha"
const vari10 = "i_saiitem1"
#
const nome11 = "Saiu flutuando"
const tipo11 = "opc_linha"
const vari11 = "i_saiitem2"
#
const nome12 = "Saiu voando"
const tipo12 = "opc_linha"
const vari12 = "i_saiitem3"
#
const nome13 = "Saiu cambaleando"
const tipo13 = "opc_linha"
const vari13 = "i_saiitem4"
#
const nome14 = "Olhar dentro"
const tipo14 = "opc_linha"
const vari14 = "i_olhardentro"
const nulo14 = "\c3" + txtnulo("h_cmd_olhar", "m_dentro")
#
const nome15 = "Está vazio"
const tipo15 = "opc_linha"
const vari15 = "i_olharvazio"
const nulo15 = "\c3" + txtnulo("h_cmd_olhar", "m_vazio")
#
const nome16 = "Pegou perso"
const tipo16 = "opc_linha"
const vari16 = "i_pegouitem1"
const nulo16 = "\c3" + txtnulo("h_cmd_pegar", "m_pegar_item1")
#
const nome17 = "Pegou outros"
const tipo17 = "opc_linha"
const vari17 = "i_pegouitem2"
const nulo17 = "\c3" + txtnulo("h_cmd_pegar", "m_pegar_item2")
#
const nome18 = "Soltou perso"
const tipo18 = "opc_linha"
const vari18 = "i_soltouitem1"
const nulo18 = "\c3" + txtnulo("h_cmd_soltar", "m_soltar_item1")
#
const nome19 = "Soltou outros"
const tipo19 = "opc_linha"
const vari19 = "i_soltouitem2"
const nulo19 = "\c3" + txtnulo("h_cmd_soltar", "m_soltar_item2")
#
const nome20 = "Abriu perso"
const tipo20 = "opc_linha"
const vari20 = "i_abriuitem1"
const nulo20 = "\c3" + txtnulo("h_cmd_abrir", "m_item_abriu1")
#
const nome21 = "Abriu outros"
const tipo21 = "opc_linha"
const vari21 = "i_abriuitem2"
const nulo21 = "\c3" + txtnulo("h_cmd_abrir", "m_item_abriu2")
#
const nome22 = "Fechou perso"
const tipo22 = "opc_linha"
const vari22 = "i_fechouitem1"
const nulo22 = "\c3" + txtnulo("h_cmd_fechar", "m_item_fechou1")
#
const nome23 = "Fechou outros"
const tipo23 = "opc_linha"
const vari23 = "i_fechouitem2"
const nulo23 = "\c3" + txtnulo("h_cmd_fechar", "m_item_fechou2")
#
const nome24 = "Trancou perso"
const tipo24 = "opc_linha"
const vari24 = "i_trancouitem1"
const nulo24 = "\c3" + txtnulo("h_cmd_trancar", "m_item_trancou1")
#
const nome25 = "Trancou outros"
const tipo25 = "opc_linha"
const vari25 = "i_trancouitem2"
const nulo25 = "\c3" + txtnulo("h_cmd_trancar", "m_item_trancou2")
#
const nome26 = "Destrancou perso"
const tipo26 = "opc_linha"
const vari26 = "i_destrancouitem1"
const nulo26 = "\c3" + txtnulo("h_cmd_destrancar", "m_item_destrancou1")
#
const nome27 = "Destrancou outros"
const tipo27 = "opc_linha"
const vari27 = "i_destrancouitem2"
const nulo27 = "\c3" + txtnulo("h_cmd_destrancar", "m_item_destrancou2")


classe menu_iatribs
herda comando_menu_adm
const titulo = "Atributos"
const menufim = var.menufim
#
const nome1 = "Texto item"
const info1 = "Aparece na frente da descrição do item, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está emitindo uma luz"
const tipo1 = "opc_linha"
const vari1 = "m_atribs1"
const exec1 = "atribs_exec"
#
const nome3 = "Sim/não item"
const info3 = "Nota: Muitos desses atributos não têm significado em itens"
const tipo3 = "opc_atribbit"
const vari3 = "recalc1_auto"
const exec3 = "recalc_exec"
#
const nome6 = "Texto ao vestir"
const info6 = "Aparece na frente da descrição do personagem, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está protegid$s por uma luz"
const tipo6 = "opc_linha"
const vari6 = "m_atribs2"
const exec6 = "atribs_dono"
#
const nome7 = "Números ao vestir"
const tipo7 = "opc_atribnum"
const vari7 = "recalc2_auto"
const exec7 = "recalc_dono"
#
const nome8 = "Sim/não ao vestir"
const tipo8 = "opc_atribbit"
const vari8 = "recalc2_auto"
const exec8 = "recalc_dono"
#
const nome9 = "Ataque ao vestir"
const info9 = "Afetam os danos quando o personagem ataca alguém"
const tipo9 = "opc_atribatk"
const vari9 = "recalc2_auto"
const exec9 = "recalc_dono"
#
const nome10 = "Defesa ao vestir"
const info10 = "Afetam os danos quando alguém ataca o personagem"
const tipo10 = "opc_atribdef"
const vari10 = "recalc2_auto"
const exec10 = "recalc_dono"


classe menu_iluz
herda comando_menu_adm
const titulo = "Fonte de luz"
const menufim = var.menufim
#
const nome1 = "Tipo de luz"
const tipo1 = "opc_opcao"
const vari1 = "luzitem"
const extr1 = "Não aceita acender/apagar, sem fogo\n\
Lanterna (acende/apaga, sem fogo)\n\
Lanterna 2 (acende/apaga, inclusive na água)\n\
Não aceita acender/apagar, produz fogo\n\
Lampião (acende/apaga, produz fogo)\n\
Fósforo (acende uma vez, produz fogo)\n\
Tocha (acende com fogo, produz fogo)\n\
Automático (acende ao vestir, sem fogo)"
#
const nome2 = "Duração da luz"
const info2 = "Em décimos de segundo, se menor que zero começa apagado"
const tipo2 = "opc_numero"
const vari2 = "luzini"
#
const nome3 = "Acendeu mensagem perso"
const tipo3 = "opc_linha"
const clas3 = var.classe1
const vari3 = "luzliga1"
#
const nome4 = "Acendeu mensagem outros"
const tipo4 = "opc_linha"
const vari4 = "luzliga2"
#
const nome5 = "Sem luz mensagem"
const info5 = "Mensagem quando a luz acaba, se estiver vazio não envia nenhuma mensagem"
const tipo5 = "opc_linha"
const vari5 = "luztxt"
#
const nome6 = "Sem luz item some"
const info6 = "Se o item some (é apagado) quando a luz acaba"
const tipo6 = "opc_simnao"
const vari6 = "luzfim"


classe menu_iitem
herda comando_menu_adm
const titulo = "Comando Item"
const menufim = var.menufim
#
const nome1 = "Evolução"
const info1 = "Se houver uma evolução, a técnica de item é ignorada"
const tipo1 = "opc_evoluir--"
const vari1 = "i_evoluir_"
#
const nome2 = "Técnica de item"
const info2 = "Somente se o item não faz evoluir"
const tipo2 = "opc_linha"
const vari2 = "i_item_tecnica"
#
const nome3 = "Técnica nível"
const info3 = "A técnica é executada como se o personagem estivesse nesse nível,\m\
porém com o mesmo ataque, defesa"
const tipo3 = "opc_numero"
const vari3 = "i_item_nivel"
const extr3 = "0 65535"
#
const titu4 = " * Usou item em si mesmo"
#
const nome4 = "Msg perso"
const tipo4 = "opc_linha"
const vari4 = "i_item_auto1"
#
const nome5 = "Msg outros"
const tipo5 = "opc_linha"
const vari5 = "i_item_auto2"
#
const titu6 = " * Usou item em outros"
#
const nome6 = "Msg perso"
const tipo6 = "opc_linha"
const vari6 = "i_item_outro1"
#
const nome7 = "Msg alvo"
const tipo7 = "opc_linha"
const vari7 = "i_item_outro2"
#
const nome8 = "Msg outros"
const tipo8 = "opc_linha"
const vari8 = "i_item_outro3"


classe menu_icomum
herda comando_menu_adm
const nome1 = "Nome"
const tipo1 = "opc_linha"
const vari1 = "nome"
#
const nome2 = "Palavras chave"
const info2 = "Palavras que os jogadores digitam para se referir ao item"
const tipo2 = "opc_linha"
const vari2 = "ident"
const nulo2 = "\c3" + [classe]:nome
#
const nome3 = "Descrição curta"
const info3 = "Descrição usada na maioria dos comandos"
const tipo3 = "opc_linha"
const vari3 = "descnome"
const nulo3 = "\c3" + [classe]:nome
#
const nome4 = "Descrição sala"
const info4 = "Descrição quando está na sala"
const tipo4 = "opc_linha"
const vari4 = "descsala"
#
const nome5 = "Descrição lojas"
const tipo5 = "opc_linha"
const vari5 = "descloja"
const nulo5 = "\c3" + ([classe]:descnome ?? [classe]:nome)
#
const nome6 = "Outras descrições"
const tipo6 = "menu_idescoutros--"
#
const nome7 = "Sexo Msg"
const info7 = "Usado nas mensagens com o objeto"
const tipo7 = "opc_opcao"
const vari7 = "msexo"
const extr7 = "Feminino\nMasculino"
#
const nome8 = "Peso"
const info8 = "Em gramas"
const tipo8 = "opc_numero"
const vari8 = "pesoobj"
const extr8 = "1 1000000000"
const exec8 = "ajustapeso"
#
const nome9 = "Volume"
const tipo9 = "opc_numero"
const vari9 = "volobj"
const extr9 = "1 1000000000"
const exec9 = "ajustapeso"
#
const nome12 = "Nível"
const info12 = "Nível mínimo para vestir/empunhar o item ou usar munição do inventário"
const tipo12 = "opc_numero"
const vari12 = "nivel"
#
const nome13 = "Renascer"
const info13 = "Quantas vezes precisa renascer para vestir/empunhar o item\n\
ou usar munição do inventário"
const tipo13 = "opc_numero"
const vari13 = "renascer"
#
const nome14 = "Mantém na sala"
const info14 = "Como a opção \"Apagar itens\" da sala ou área afeta o item"
const tipo14 = "opc_simnao"
const vari14 = "mantersala"
#
const nome15 = "Mantém em jogador"
const info15 = "Se o jogador não perde o item ao entrar em uma sala que mata e perde itens"
const tipo15 = "opc_simnao"
const vari15 = "manterperso"
#
const nome16 = "Quanto vale"
const tipo16 = "opc_numero"
const vari16 = "valor"
#
const nome17 = "Tipo de item"
const info17 = "Usado nos comandos Vender, Avaliar e Doar"
const tipo17 = "opc_vetoritemtipos"
const vari17 = "tipoitem"
const extr17 = config:item_tipos
const exec17 = "tipoitem_mudou"
#
const nome18 = "Conflita com itens"
const info18 = "Tipos de itens que não podem ser vestidos ou empunhados juntos com este"
const tipo18 = "opc_vetorhex"
const vari18 = "vestiritem"
const extr18 = config:item_tipos
#
const nome19 = "Aonde vestir"
const info19 = "Ocupa uma dessas posições ao vestir"
const tipo19 = "opc_vetorhex"
const vari19 = "vestir1"
const extr19 = config:equip_txt
#
const nome20 = "Ocupa posições"
const info20 = "Posições secundárias ocupadas ao vestir ou empunhar"
const tipo20 = "opc_vetorhex"
const vari20 = "vestirextra"
const extr20 = config:equip_txt
#
const nome21 = "Personagens vestem"
const info21 = "Ao vestir ou empunhar"
const tipo21 = "opc_opcao"
const vari21 = "vestirsim"
const extr21 = "Todos\nJogadores e PNJs\nAnimais capturados"
#
const nome22 = "Vestir gênero"
const info22 = "Ao vestir ou empunhar"
const tipo22 = "opc_opcao"
const vari22 = "vestirsexo"
const extr22 = "Todos\nSomente feminino\nSomente masculino"
#
const nome23 = "Não podem vestir"
const info23 = "Raças e classes que não podem vestir ou empunhar"
const tipo23 = "opc_tipos"
const vari23 = "vestirnao"
#
const nome24 = "Aulas para vestir"
const info24 = "Conhecimento necessário para vestir ou empunhar"
const tipo24 = "opc_menuaula"
const vari24 = "vestiraula"
#
const nome25 = "Sons e mensagens"
const tipo25 = "menu_isom--"
#
const nome26 = "Atributos"
const tipo26 = "menu_iatribs--"
#
const nome27 = "Fome e sede"
const tipo27 = "menu_ifome1--"
#
const nome28 = "Comando Item"
const tipo28 = "menu_iitem--"
#
const nome29 = "Pega animal nível"
const info29 = "Nível médio dos animais que podem ser capturados com esse item,\n\
ou 0 se não puder capturar"
const tipo29 = "opc_numero"
const vari29 = "i_captura"
#
const nome30 = "Chave"
const info30 = "Código da chave; abre fechaduras com o mesmo código"
const tipo30 = "opc_linha"
const vari30 = "i_chave"
#
const nome31 = "Ao pegar"
const info31 = "Mensagem ao tentar pegar o item; se vazio, consegue pegar"
const tipo31 = "opc_linha"
const vari31 = "i_pegar"
#
const nome32 = "Pode seguir"
const info32 = "Se o comando Seguir reconhece este item"
const tipo32 = "opc_simnao"
const vari32 = "i_seguir"
#
const nome50 = "Variáveis"
const tipo50 = "opc_linha"
const vari50 = "inivar"
#
const nome51 = "Eventos hora"
const info51 = "Se a função cmd_hora é chamada quando a hora MUD mudar (5 minutos)"
const tipo51 = "opc_simnao"
const vari51 = "evhora"
const exec51 = "ajustaobj"
#
const nome52 = "Eventos item"
const info52 = "Receber eventos do próprio item"
const tipo52 = "opc_simnao"
const vari52 = "eveste"
const exec52 = "ajustaobj"
#
const nome53 = "Eventos dono perso"
const info53 = "Se recebe eventos do dono se for personagem"
const tipo53 = "opc_simnao"
const vari53 = "evperso"
const exec53 = "ajustaobj"
#
const nome54 = "Eventos dono item"
const info54 = "Se recebe eventos do dono se for item"
const tipo54 = "opc_simnao"
const vari54 = "evitem"
const exec54 = "ajustaobj"
#
const nome55 = "Eventos dono sala"
const info55 = "Se recebe eventos da sala se estiver em uma sala"
const tipo55 = "opc_simnao"
const vari55 = "evsala"
const exec55 = "ajustaobj"


classe menu_item1
herda menu_icomum
const titulo = "Item simples " + txt(var.classe1, 2)
#
const nome10 = "Dentro"
const tipo10 = "menu_identro1--"
#
const nome11 = "Arma"
const tipo11 = "menu_iarma3--"


classe menu_item2
herda menu_icomum
const titulo = "Item grupo " + txt(var.classe1, 2)
#
const nome10 = "Dentro"
const tipo10 = "menu_identro2--"
#
const nome11 = "Arma"
const tipo11 = "menu_iarma2--"
#
const nome27 = "Fome e sede"
const tipo27 = "menu_ifome2--"


classe menu_item3
herda menu_icomum
const titulo = "Item " + txt(var.classe1, 2)
#
const nome10 = "Dentro"
const tipo10 = "menu_identro3--"
#
const nome11 = "Arma"
const tipo11 = "menu_iarma3--"
#
const nome33 = "Mobília"
const info33 = "Sentar/dormir confortavelmente se recupera mais rápido"
const tipo33 = "opc_opcao"
const vari33 = "i_movel"
const extr33 = "Não\n\
Sentar\n\
Sentar e dormir\n\
Sentar confortavelmente\n\
Sentar e dormir confortavelmente"
#
const nome34 = "Lugares"
const tipo34 = "opc_numero"
const vari34 = "i_lugar"
#
const nome35 = "Move mobília"
const info35 = "Se pode andar pelo MUD sentado na mobília"
const tipo35 = "opc_simnao"
const vari35 = "i_mover"
#
const nome36 = "Fonte de luz"
const tipo36 = "menu_iluz--"
