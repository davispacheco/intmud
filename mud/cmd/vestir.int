classe h_cmd_vestir
herda comando_comum
const objmenu = $m_cmd_vestir
const objtipo = 2 # Pode renomear
const posic = 5
txt12 lugar # Posições aonde quer vestir
txt12 vest1 # Posições principais e extras aonde está vestindo alguma coisa
#
const m_ajuda = "-t\n\
-s <objeto> [posição]\n\
Seu personagem veste ou usa um objeto que está carregando.\n\
Para vestir tudo (até 10 objetos) tecle TUDO ao invés do objeto.\n\
Para saber em que posições pode vestir algo, tecle EQUIP TUDO"
const m_sem_args = "Vestir o quê?"
const m_naover = "Você não vê $m."
const m_longe_a = "$A está longe."
const m_nao_consegue_p = "Você não consegue vestir $o."
const m_nao_consegue_a = "$A não consegue vestir $o."
const m_nivel_p = "Você precisa chegar no nível $m para vestir $o."
const m_nivel_a = "$A precisa chegar no nível $m para vestir $o."
const m_renascer1 = "Você precisa renascer uma vez para vestir $o."
const m_renascer2 = "Você precisa renascer duas vezes para vestir $o."
const m_renascer3 = "Você precisa renascer $m vezes para vestir $o."
const m_conhecimento_p = "Você não conhece $m nível $1."
const m_conhecimento_a = "$A não conhece $m nível $1."
const m_posicao_p = "Você não sabe aonde fica $m."
const m_posicao_a = "$A não sabe aonde fica $m."
const m_em_uso_p = "Você já está usando $o nessa posição."
const m_em_uso_a = "$A já está usando $o nessa posição."
const m_em_cima_p = "Antes você precisa parar de usar $o."
const m_em_cima_a = "Antes $A precisa parar de usar $o."
const m_item_p = "$N impede que você use $o."
const m_item_a = "$N impede que $a use $o."
const admordem = "m_ajuda m_sem_args m_naover m_longe_a m_nao_consegue_p\n\
m_nao_consegue_a m_nivel_p m_nivel_a m_renascer1 m_renascer2 m_renascer3\n\
m_conhecimento_p m_conhecimento_a m_posicao_p m_posicao_a\n\
m_em_uso_p m_em_uso_a m_em_cima_p m_em_cima_a m_item_p m_item_a"

func escr
  ret !arg1, $mensjog.msg(m_sem_args, arg0)
  refvar perm_msg = $perm_[arg0.jogperm].vestir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  refvar alvo = ref(arg0.persoesc) # Quem vai vestir
  ret alvo.dono != arg0 && alvo.dono != arg0.dono, $mens.mp(m_longe_a, arg0, alvo)
  refvar tipomsg = arg0 == alvo ? "_p" : "_a"
  refvar tipo1 = txte(alvo.tipo1)
  refvar tipo2 = txte(alvo.tipo2)
  refvar tipo3 = txte(alvo.tipo3)
# Variáveis
  int8 achou # Se 0, não achou nenhum item para vestir
  nomeobj n # Para reconhecer os itens
  listaitem item
  lugar = "0"
  vest1 = alvo.positemvestir
# Descobre aonde quer vestir
  misc:separa(arg1) # Separa nome do objeto do nome da posição
  se !misc:sep2
    lugar = alvo.positemtotal # Todas as posições que possui
  senao
    n.ini(misc:sep2, 100)
    textotxt t
    textopos p
    t.addfim(config:equip_txt)
    refvar lug2 = ~txthex(alvo.positemtotal, 12)
    epara p = t.ini, p, p.depois
      lug2 & intbith(p.linha) == "0" && n.nome(p.texto) && (lugar |= intbith(p.linha))
    efim
    se lugar == "0"
      $mens.mens = misc:sep2
      $mens.mp(m_posicao[tipomsg], arg0, alvo)
      ret
    fimse
  fimse
# Vestir itens
  listaobj l
  n.ini(misc:sep1, misc:objmax, misc:tudo)
  epara l.addfim(alvo.dentro1), l, l.ini.remove
    ref r = l.objini
    continuar !r.visivel(arg0) || !n.nome(r.ident2, r.objtot)
    achou = 1
    txt100 erro # Se for um texto vazio, pode vestir
# Checa se o personagem pode vestir
    se r.vestirsim == (alvo == arg0 ? 2 : 1)
      erro = m_nao_consegue[tipomsg]
    senao r.vestirsexo == (alvo.psexo ? 1 : 2)
      erro = m_nao_consegue[tipomsg]
# Checa o nível
    senao int(r.pnivel) > alvo.pnivel
      $mens.mens = r.pnivel
      erro = m_nivel[tipomsg]
    senao int(r.renascer) > arg0.prenascer
      $mens.mens = r.renascer
      se r.renascer == 1
        erro = m_renascer1
      senao r.renascer == 2
        erro = m_renascer2
      senao
        erro = m_renascer3
      fimse
# Checa se a classe ou a raça tem permissão
    senao !r.vestirnao
    senao tipo1 && txtproclin(txte(r.vestirnao), tipo1) >= 0
      erro = m_nao_consegue[tipomsg]
    senao tipo2 && txtproclin(txte(r.vestirnao), tipo2) >= 0
      erro = m_nao_consegue[tipomsg]
    senao tipo3 && txtproclin(txte(r.vestirnao), tipo3) >= 0
      erro = m_nao_consegue[tipomsg]
    fimse
# Checa se tem conhecimento suficiente
    se !erro
      txt200 lin
      textotxt t2
      epara t2.addfim(r.vestiraula(alvo)), t2.linhas, t2.remove
        continuar !(lin = t2.ini.texto)
        continuar alvo.var.[txt1(lin)]_ >= txt2(lin)
        $mens.mens = misc:nomevar(txt1(lin))
        $mens.o_1 = txtmin(txtsublin(misc:aulas, txt2(lin), 1))
        erro = m_conhecimento[tipomsg]
      efim
    fimse
# Tenta vestir
    erro ? $mens.mp(erro, arg0, alvo, r) : objvestir(alvo, r, int(n))
  efim
# Avisa se não encontrou nenhum item
  se !achou
    misc:separa(arg1)
    $mens.mens = misc:sep1
    $mens.mp(m_naover, arg0)
  fimse

func objvestir # Quer vestir um item
# arg0 = personagem, arg1 = objeto, arg2 = quantidade, lugar = aonde vestir
  refvar tipomsg = arg0 == arg0.contr ? "_p" : "_a"
  txt512 lin
  uint8 total
  epara total = arg2, total, total--
# Obtém posições aonde pode vestir o item
    refvar lugar1 = lugar & arg1.vestir1
    se lugar1 == "0"
      $mens.mp(m_nao_consegue[tipomsg], arg0.contr, arg0, arg1)
      ret
    fimse
# Exclui posições em que está vestindo algo
    refvar lugar2 = lugar1 & ~txthex(vest1, 12)
    se lugar2 == "0"
      refvar obj = arg0.objitemvestir(lugar1)
      $mens.mp(m_em_uso[tipomsg], arg0.contr, arg0, obj)
      ret
    fimse
# Verifica posições extras
    se vest1 & arg1.vestirextra != "0"
      refvar obj = arg0.objitemvestir(arg1.vestirextra)
      $mens.mp(m_em_uso[tipomsg], arg0.contr, arg0, obj)
      ret
    fimse
# Exclui posições em que tem item em cima e obtém: numpos = posição
    epara lin = txtbith(lugar2), lin, lin = txt2(lin)
      sair vest1 & config:vestir[txt1(lin)] == "0"
    efim
    se !lin
      lin = txtbith(lugar2)
      refvar obj = arg0.objitemvestir(config:vestir[txt1(lin)])
      $mens.mp(m_em_cima[tipomsg], arg0.contr, arg0, obj)
      ret
    fimse
    refvar numpos = 1 + txt1(lin)
# Verifica itens em cima nas posições extras
    epara lin = txtbith(arg1.vestirextra), lin, lin = txt2(lin)
      continuar vest1 & config:vestir[txt1(lin)] == "0"
      refvar obj = arg0.objitemvestir(config:vestir[txt1(lin)])
      $mens.mp(m_em_cima[tipomsg], arg0.contr, arg0, obj)
      ret
    efim
# Verifica se conflita com algum outro tipo de item
    listaitem i
    epara i = arg0.dentro2.ini, i, i.depois
      se i.obj.item && ((txt(i.obj.tipoitem2) & arg1.vestiritem) != "0" || \
(txt(arg1.tipoitem2) & i.obj.vestiritem) != "0")
        ret $mens.mp(m_item[tipomsg], arg0.contr, arg0, arg1, i.obj)
      fimse
    efim
# Checa se o item deixa vestir
    refvar lin = arg1.cmd_podevestir(arg0)
    ret lin, lin
# Eventos
    listaobj l
    epara l.addfim(arg0.evento), l, l.ini.remove
      ret l.objini.cmd_vestir(arg0, arg1, numpos, arg0), nulo
    efim
    epara l.addfim(arg1.evento), l, l.ini.remove
      ret l.objini.cmd_vestir(arg0, arg1, numpos, arg1), nulo
    efim
# Veste o item
    arg1.vestir(numpos)
    refvar mvestir_a = txtsublin(config:equip_vestir, numpos - 1, 1) ?? "$P veste $o."
    refvar mvestir_p = txtsublin(config:equip_perso, numpos - 1, 1) ?? mvestir_a
    $mens.p(arg0, nulo, arg1)
    $mens.msgsomvis(mvestir[tipomsg], arg1.i_som_vest1, arg0.contr)
    $mens.mvis2som(mvestir_a, arg1.i_som_vest1)
# Eventos
    epara l.addfim(arg0.evento), l, l.ini.remove
      l.objini.cmd_vestiu(arg0, arg1, numpos, arg0)
    efim
    epara l.addfim(arg1.evento), l, l.ini.remove
      l.objini.cmd_vestiu(arg0, arg1, numpos, arg1)
    efim
# Acerta posições
    vest1 = arg0.positemvestir
  efim


classe m_cmd_vestir
herda comando_menu_cmd
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"
#
const nome2 = "Sem argumentos"
const tipo2 = "opc_linha"
const vari2 = "m_sem_args"
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Renascer 1 vez"
const tipo4 = "opc_linha"
const vari4 = "m_renascer1"
#
const nome5 = "Renascer 2 vezes"
const tipo5 = "opc_linha"
const vari5 = "m_renascer2"
#
const nome6 = "Renascer mais vezes"
const tipo6 = "opc_linha"
const vari6 = "m_renascer3"
#
const titu7 = " * Personagem veste"
#
const nome7 = "Conhecimento"
const tipo7 = "opc_linha"
const vari7 = "m_conhecimento_p"
#
const nome8 = "Não consegue"
const tipo8 = "opc_linha"
const vari8 = "m_nao_consegue_p"
#
const nome9 = "Posição não existe"
const tipo9 = "opc_linha"
const vari9 = "m_posicao_p"
#
const nome10 = "Já tem outro item"
const tipo10 = "opc_linha"
const vari10 = "m_em_uso_p"
#
const nome11 = "Outro item em cima"
const tipo11 = "opc_linha"
const vari11 = "m_em_cima_p"
#
const nome12 = "Conflita com item"
const tipo12 = "opc_linha"
const vari12 = "m_item_p"
#
const titu13 = " * Animal veste"
#
const nome13 = "Conhecimento"
const tipo13 = "opc_linha"
const vari13 = "m_conhecimento_a"
#
const nome14 = "Animal longe"
const tipo14 = "opc_linha"
const vari14 = "m_longe_a"
#
const nome15 = "Não consegue"
const tipo15 = "opc_linha"
const vari15 = "m_nao_consegue_a"
#
const nome16 = "Posição não existe"
const tipo16 = "opc_linha"
const vari16 = "m_posicao_a"
#
const nome17 = "Já tem outro item"
const tipo17 = "opc_linha"
const vari17 = "m_em_uso_a"
#
const nome18 = "Outro item em cima"
const tipo18 = "opc_linha"
const vari18 = "m_em_cima_a"
#
const nome19 = "Conflita com item"
const tipo19 = "opc_linha"
const vari19 = "m_item_a"
